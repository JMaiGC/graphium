# Testing the gcn model with the PCQMv2 dataset on IPU.
constants:
  name: &name finetune_lipophilicity_astrazeneca
  seed: &seed 42
  raise_train_error: true   # Whether the code should raise an error if it crashes during training

accelerator:
  type: gpu  # cpu or ipu or gpu
  float32_matmul_precision: medium
  config_override:
    datamodule:
      args:
        # Data handling-related
        batch_size_training: 200
        batch_size_inference: 200
    trainer:
      trainer:
        precision: 32
        accumulate_grad_batches: 1

datamodule:
  module_type: "ADMETBenchmarkDataModule"
  args:
    # TDC specific
    tdc_benchmark_names: [lipophilicity_astrazeneca]
    tdc_train_val_seed: *seed
    # Featurization
    prepare_dict_or_graph: pyg:graph
    featurization_n_jobs: 0
    processed_graph_data_path: "/home/mila/f/frederik.wenkel/scratch/data/graphium/datacache/admet/"
    featurization_progress: True
    featurization_backend: "loky"
    processed_graph_data_path: "../datacache/tdc-admet-demo/"
    featurization:
      atom_property_list_onehot: [atomic-number, group, period, total-valence]
      atom_property_list_float: [degree, formal-charge, radical-electron, aromatic, in-ring]
      edge_property_list: [bond-type-onehot, stereo, in-ring]
      add_self_loop: False
      explicit_H: False # if H is included
      use_bonds_weights: False
      pos_encoding_as_features:
        pos_types:
          lap_eigvec:
            pos_level: node
            pos_type: laplacian_eigvec
            num_pos: 8
            normalization: "none" # nomrlization already applied on the eigen vectors
            disconnected_comp: True # if eigen values/vector for disconnected graph are included
          lap_eigval:
            pos_level: node
            pos_type: laplacian_eigval
            num_pos: 8
            normalization: "none" # nomrlization already applied on the eigen vectors
            disconnected_comp: True # if eigen values/vector for disconnected graph are included
          rw_pos: # use same name as pe_encoder
            pos_level: node
            pos_type: rw_return_probs
            ksteps: 16

    # cache_data_path: .
    num_workers: 4 # -1 to use all
    persistent_workers: False # if use persistent worker at the start of each epoch.
    # Using persistent_workers false might make the start of each epoch very long.
    featurization_backend: "loky"


architecture:
  model_type: FullGraphMultiTaskNetwork
  mup_base_path: null
  pre_nn:   # Set as null to avoid a pre-nn network
    out_dim: 64
    hidden_dims: 256
    depth: 2
    activation: relu
    last_activation: none
    dropout: &dropout 0.18
    normalization: &normalization layer_norm
    last_normalization: *normalization
    residual_type: none

  pre_nn_edges: null   # Set as null to avoid a pre-nn network

  pe_encoders:
    out_dim: 32
    pool: "sum" #"mean" "max"
    last_norm: None #"batch_norm", "layer_norm"
    encoders: #la_pos |  rw_pos
      la_pos:  # Set as null to avoid a pre-nn network
        encoder_type: "laplacian_pe"
        input_keys: ["laplacian_eigvec", "laplacian_eigval"]
        output_keys: ["feat"]
        hidden_dim: 64
        out_dim: 32
        model_type: 'DeepSet' #'Transformer' or 'DeepSet'
        num_layers: 2
        num_layers_post: 1 # Num. layers to apply after pooling
        dropout: 0.1
        first_normalization: "none" #"batch_norm" or "layer_norm"
      rw_pos:
        encoder_type: "mlp"
        input_keys: ["rw_return_probs"]
        output_keys: ["feat"]
        hidden_dim: 64
        out_dim: 32
        num_layers: 2
        dropout: 0.1
        normalization: "layer_norm" #"batch_norm" or "layer_norm"
        first_normalization: "layer_norm" #"batch_norm" or "layer_norm"



  gnn:  # Set as null to avoid a post-nn network
    in_dim: 64 # or otherwise the correct value
    out_dim: &gnn_dim 96
    hidden_dims: *gnn_dim
    depth: 4
    activation: gelu
    last_activation: none
    dropout: 0.1
    normalization: "layer_norm"
    last_normalization: *normalization
    residual_type: simple
    virtual_node: 'none'
    layer_type: 'pyg:gcn' #pyg:gine #'pyg:gps' # pyg:gated-gcn, pyg:gine,pyg:gps
    layer_kwargs: null # Parameters for the model itself. You could define dropout_attn: 0.1

  graph_output_nn:
    graph:
      pooling: [sum]
      out_dim: *gnn_dim
      hidden_dims: *gnn_dim
      depth: 1
      activation: relu
      last_activation: none
      dropout: *dropout
      normalization: *normalization
      last_normalization: "none"
      residual_type: none

  task_heads:
    lipophilicity_astrazeneca:
      task_level: graph
      out_dim: 1
      hidden_dims: 64
      depth: 2
      activation: relu
      last_activation: none
      dropout: *dropout
      normalization: *normalization
      last_normalization: "none"
      residual_type: none

#Task-specific
predictor:
  metrics_on_progress_bar:
    lipophilicity_astrazeneca: ["mae"]
  loss_fun:
    lipophilicity_astrazeneca: mae
  random_seed: *seed
  optim_kwargs:
    lr: 4.e-5 # warmup can be scheduled using torch_scheduler_kwargs
    # weight_decay: 1.e-7
  torch_scheduler_kwargs:
    module_type: WarmUpLinearLR
    max_num_epochs: &max_epochs 10
    warmup_epochs: 2
    verbose: False
  scheduler_kwargs:
  #  monitor: &monitor qm9/mae/train
  #  mode: min
  #  frequency: 1
  target_nan_mask: null # null: no mask, 0: 0 mask, ignore-flatten, ignore-mean-per-label
  multitask_handling: flatten # flatten, mean-per-label

# Task-specific
metrics:
  lipophilicity_astrazeneca:
    - name: mae
      metric: mae
      target_nan_mask: null
      multitask_handling: flatten
      threshold_kwargs: null
    - name: spearman
      metric: spearmanr
      threshold_kwargs: null
      target_nan_mask: null
      multitask_handling: mean-per-label
    - name: pearson
      metric: pearsonr
      threshold_kwargs: null
      target_nan_mask: null
      multitask_handling: mean-per-label
    - name: r2_score
      metric: r2
      target_nan_mask: null
      multitask_handling: mean-per-label
      threshold_kwargs: null

trainer:
  seed: *seed
  logger:
    save_dir: logs/finetuned_models/
    name: *name
    project: *name
  #early_stopping:
  #  monitor: *monitor
  #  min_delta: 0
  #  patience: 10
  #  mode: &mode min
  finetuning:
    task: lipophilicity_astrazeneca
    module: task_heads              # options are (pre_nn,) gnn, graph_output_nn, task_heads
    choice: zinc                    # choose one from pretrained model (here qm9, tox12 or zinc)
    depth: 1                        # only modify last FC layer to output dimension (if necessary)
    
    added_layers:                   # config of FeedForwardNN
      out_dim: 1
      hidden_dims: 16
      depth: 3
      activation: relu
      last_activation: none
      dropout: *dropout
      normalization: *normalization
      last_normalization: "none"
      residual_type: none
    
    epoch_unfreeze_all: none

  model_checkpoint:
    dirpath: finetuned_models/
    filename: finetuned-toy-model-{epoch}
    # monitor: *monitor
    # mode: *mode
    # save_top_k: 1
    save_last: True
  trainer:
    max_epochs: *max_epochs
    min_epochs: 1
    check_val_every_n_epoch: 2
